import me.champeau.jmh.JmhBytecodeGeneratorTask
import org.gradle.internal.os.OperatingSystem
import org.ajoberstar.grgit.Grgit
import java.time.Duration

plugins {
    id 'java'
    id 'scala'
    id 'me.champeau.jmh' version '0.7.1'
    id 'org.ajoberstar.grgit' version '5.2.0'
    id 'pl.allegro.tech.build.axion-release' version '1.15.5'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
    id 'maven-publish'
    id 'signing'
}

scmVersion {
    versionCreator('versionWithBranch')
    tag {
        prefix = ''
    }
}

group = 'org.simdjson'
version = scmVersion.version

repositories {
    mavenCentral()
}

java {
    // It seems that specifying the minimum supported Java version while allowing the use of newer
    // ones isn't possible in Gradle. To test the library against multiple Java versions, the
    // workaround proposed in https://github.com/gradle/gradle/issues/16256 has been applied:
    if (!JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_18)) {
        toolchain {
            languageVersion = JavaLanguageVersion.of(18)
        }
    }
    withJavadocJar()
    withSourcesJar()
}

ext {
    junitVersion = '5.9.1'
    jsoniterScalaVersion = '2.24.4'
}

dependencies {
    jmhImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.16.0'
    jmhImplementation group: 'com.alibaba.fastjson2', name: 'fastjson2', version: '2.0.42'
    jmhImplementation group: 'com.jsoniter', name: 'jsoniter', version: '0.9.23'
    jmhImplementation group: 'com.github.plokhotnyuk.jsoniter-scala', name: 'jsoniter-scala-core_2.13', version: jsoniterScalaVersion
    jmhImplementation group: 'com.google.guava', name: 'guava', version: '32.1.2-jre'
    compileOnly group: 'com.github.plokhotnyuk.jsoniter-scala', name: 'jsoniter-scala-macros_2.13', version: jsoniterScalaVersion

    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.24.2'
    testImplementation group: 'org.apache.commons', name: 'commons-text', version: '1.10.0'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: junitVersion
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVersion
}

tasks.register('downloadTestData') {
    doFirst {
        def testDataDir = new File("${project.projectDir.getAbsolutePath()}/testdata")
        if (!testDataDir.exists()) {
            testDataDir.mkdir()
        }
        def numbersTestDataDir = new File("${testDataDir}/parse-number-fxx-test-data")
        if (!numbersTestDataDir.exists()) {
            def grgit = Grgit.clone(dir: numbersTestDataDir, uri: 'https://github.com/nigeltao/parse-number-fxx-test-data.git')
            grgit.close()
        }
    }
}

tasks.register('test256', Test) {
    dependsOn downloadTestData
    useJUnitPlatform()
    jvmArgs += [
            '--add-modules', 'jdk.incubator.vector',
            '-Xmx2g',
            '-Dorg.simdjson.species=256'
    ]
    testLogging {
        events 'PASSED', 'SKIPPED', 'FAILED', 'STANDARD_OUT', 'STANDARD_ERROR'
    }
}

tasks.register('test512', Test) {
    dependsOn downloadTestData
    useJUnitPlatform()
    jvmArgs += [
            '--add-modules', 'jdk.incubator.vector',
            '-Xmx2g',
            '-Dorg.simdjson.species=512'
    ]
    testLogging {
        events 'PASSED', 'SKIPPED', 'FAILED', 'STANDARD_OUT', 'STANDARD_ERROR'
    }
}

test {
    dependsOn 'test256'
    dependsOn 'test512'
}

tasks.withType(JmhBytecodeGeneratorTask).configureEach {
    jvmArgs.set(["--add-modules=jdk.incubator.vector"])
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add("--add-modules=jdk.incubator.vector")
}

tasks.compileJmhScala.classpath = sourceSets.main.compileClasspath

tasks.compileJmhJava.classpath += files(sourceSets.jmh.scala.classesDirectory)

compileTestJava {
    options.compilerArgs += [
            '--add-modules', 'jdk.incubator.vector'
    ]
}

javadoc.options {
    addStringOption('-add-modules', 'jdk.incubator.vector')
}

jmh {
    fork = 1
    warmupIterations = 3
    iterations = 5
    jvmArgsPrepend = [
            '--add-modules=jdk.incubator.vector'
    ]
    if (getBooleanProperty('jmh.profilersEnabled', false)) {
        if (OperatingSystem.current().isLinux()) {
            profilers = [
                    'perf',
                    'perfasm:intelSyntax=true',
                    'async:verbose=true;output=flamegraph;event=cpu;dir=./profilers/async;libPath=' + getAsyncProfilerLibPath('LD_LIBRARY_PATH')
            ]
        } else if (OperatingSystem.current().isMacOsX()) {
            profilers = [
                    'async:verbose=true;output=flamegraph;event=cpu;dir=./profilers/async;libPath=' + getAsyncProfilerLibPath('DYLD_LIBRARY_PATH')
            ]
        }
    }
    if (project.hasProperty('jmh.includes')) {
        includes = [project.findProperty('jmh.includes')]
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            pom {
                groupId 'org.simdjson'  // 替换为你的 Group ID
                artifactId 'simdjson-java'  // 替换为你的 Artifact ID
                version '0.2.0-kwai'  // 替换为你的版本号
            }
        }
    }
}

if (System.getenv('GPG_KEY_ID')) {
    signing {
        useInMemoryPgpKeys(
                System.getenv('GPG_KEY_ID'),
                System.getenv('GPG_PRIVATE_KEY'),
                System.getenv('GPG_PRIVATE_KEY_PASSWORD')
        )
        sign publishing.publications.mavenJava
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl = uri('https://s01.oss.sonatype.org/service/local/')
            snapshotRepositoryUrl = uri('https://s01.oss.sonatype.org/content/repositories/snapshots/')
            stagingProfileId = '3c0bbfe420699e'
            username = System.getenv('SONATYPE_USERNAME')
            password = System.getenv('SONATYPE_PASSWORD')
        }
    }
    connectTimeout = Duration.ofMinutes(3)
    clientTimeout = Duration.ofMinutes(3)
}

def getBooleanProperty(String name, boolean defaultValue) {
    Boolean.valueOf((project.findProperty(name) ?: defaultValue) as String)
}

static def getAsyncProfilerLibPath(String envVarName) {
    System.getenv(envVarName) ?: System.getProperty('java.library.path')
}
